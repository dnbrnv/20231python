class AccountTransaction:
    def __init__(self, account, transaction_type, amount):
        self.account = account
        self.transaction_type = transaction_type
        self.amount = amount

    def __repr__(self):
        return f'AccountTransaction[{self.account.id}, {self.transaction_type}, {self.amount}]'


class Customer:
    last_id = 0

    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname
        Customer.last_id += 1
        self.id = Customer.last_id

    def __repr__(self):
        return f'Customer[{self.id}, {self.firstname}, {self.lastname}]'


class Account:
    last_id = 1000

    def __init__(self, customer):
        self.customer = customer
        Account.last_id += 1
        self.id = Account.last_id
        self._balance = 0
        self.transactions = []

    def deposit(self, amount):
        # TODO implement
        if type(amount) != int or amount < 0:
            raise InvalidAmountException(f'Amount is invalid {amount}')
        self._balance += amount
        self.transactions.append(AccountTransaction(self, 'deposit', amount))

    def charge(self, amount):
        # TODO implement
        if type(amount) != int or amount < 0:
            raise InvalidAmountException(f'Amount is invalid {amount}')
        if amount > self._balance:
            raise InsufficientFundsException(f'Insufficient funds to charge {amount}')
        self._balance -= amount
        self.transactions.append(AccountTransaction(self, 'charge', amount))

    def get_transactions(self):
        return self.transactions

    def __repr__(self):
        return f'Account[{self.id}, {self.customer.lastname}, {self._balance}]'


class Bank:
    def __init__(self):
        self.customer_list = []
        self.account_list = []

    def create_customer(self, firstname, lastname):
        c = Customer(firstname, lastname)
        self.customer_list.append(c)
        return c

    def create_account(self, customer):
        a = Account(customer)
        self.account_list.append(a)
        return a

    def transfer(self, from_account_id, to_account_id, amount):
        # TODO implement
        from_account = self.find_account(from_account_id)
        to_account = self.find_account(to_account_id)

        if not (isinstance(amount, int) and amount > 0):
            raise InvalidAmountException(f'Invalid amount for transfer: {amount}')

        if from_account and to_account:
            if amount <= from_account._balance:
                from_account.charge(amount)
                to_account.deposit(amount)
            else:
                raise InsufficientFundsException("Insufficient funds for transfer")
        else:
            raise BankException("Invalid account IDs for transfer")

    def find_account(self, account_id):
        # TODO implement
        for account in self.account_list:
            if account.id == account_id:
                return account
        return None

    def __repr__(self):
        return f'Bank[{self.customer_list}; {self.account_list}]'


class BankException(Exception):
    pass


class InsufficientFundsException(BankException):
    pass


class InvalidAmountException(BankException):
    pass


# Demonstration
bank = Bank()

c = bank.create_customer('John', 'Brown')
print(c)
a = bank.create_account(c)
a2 = bank.create_account(c)
print(a)

c2 = bank.create_customer('Anne', 'Smith')
a3 = bank.create_account(c2)
print(bank)
print('--------')

try:
    a.deposit(330)
    a3.deposit(100)
    a2.charge(50)
except BankException as ie:
    print(f'Something went wrong {ie}')
else:
    print('Run it when no exception occurred')
finally:
    print('This was run at the end')

print('before transfer')
print(bank)
bank.transfer(1003, 1002, 140)
print('after transfer')
print(bank)

# Printing transactions
print("Transactions for Account a3:", a3.get_transactions())


# Demonstration
bank = Bank()

c = bank.create_customer('John', 'Brown')
print(c)
a = bank.create_account(c)
a2 = bank.create_account(c)
print(a)

c2 = bank.create_customer('Anne', 'Smith')
a3 = bank.create_account(c2)
print(bank)
print('--------')

try:
    a.deposit(330)
    a3.deposit(100)
    a2.charge(50)
except BankException as ie:
    print(f'Something went wrong {ie}')
else:
    print('Run it when no exception occurred')
finally:
    print('This was run at the end')

print('before transfer')
print(bank)
bank.transfer(1003, 1002, 140)
print('after transfer')
print(bank)

# Printing transactions
print("Transactions for Account a3:", a3.get_transactions())
